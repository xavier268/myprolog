
========= Single constraint test =========


0	(original)	 = 0
0	(raw form)	solver.VarIsNumber{V:parser.Variable{Name:"", Nsp:0}, Min:parser.Number{Num:0, Den:0, Normalized:false}, Max:parser.Number{Num:0, Den:0, Normalized:false}, IntegerOnly:false}
0	(checked)	<nil>

1	(original)	 =
1	(raw form)	solver.VarIsAtom{V:parser.Variable{Name:"", Nsp:0}, A:parser.Atom{Value:""}}
1	(checked)	<nil>

2	(original)	 = ""
2	(raw form)	solver.VarIsString{V:parser.Variable{Name:"", Nsp:0}, S:""}
2	(checked)	<nil>

3	(original)	 = 
3	(raw form)	solver.VarIsVar{V:parser.Variable{Name:"", Nsp:0}, W:parser.Variable{Name:"", Nsp:0}}
3	(checked)	<nil>

4	(original)	5/2 <= X <= 5
4	(raw form)	solver.VarIsNumber{V:parser.Variable{Name:"X", Nsp:0}, Min:parser.Number{Num:5, Den:2, Normalized:false}, Max:parser.Number{Num:10, Den:2, Normalized:false}, IntegerOnly:false}
4	(checked)	5/2 <= X <= 5

5	(original)	X is an integer and 5/2 <= X <= 5
5	(raw form)	solver.VarIsNumber{V:parser.Variable{Name:"X", Nsp:0}, Min:parser.Number{Num:5, Den:2, Normalized:false}, Max:parser.Number{Num:10, Den:2, Normalized:false}, IntegerOnly:true}
5	(checked)	X is an integer and 3 <= X <= 5

6	(original)	5 <= Y$4 <= 3/2
6	(raw form)	solver.VarIsNumber{V:parser.Variable{Name:"Y", Nsp:4}, Min:parser.Number{Num:10, Den:2, Normalized:false}, Max:parser.Number{Num:3, Den:2, Normalized:false}, IntegerOnly:false}
6	(checked)	<nil>, error : invalid constraint, specified range is empty

7	(original)	Y$4 is an integer and 5 <= Y$4 <= 3/2
7	(raw form)	solver.VarIsNumber{V:parser.Variable{Name:"Y", Nsp:4}, Min:parser.Number{Num:10, Den:2, Normalized:false}, Max:parser.Number{Num:3, Den:2, Normalized:false}, IntegerOnly:true}
7	(checked)	<nil>, error : invalid constraint, specified range is empty

8	(original)	5/6 <= X <= 7/6
8	(raw form)	solver.VarIsNumber{V:parser.Variable{Name:"X", Nsp:0}, Min:parser.Number{Num:5, Den:6, Normalized:false}, Max:parser.Number{Num:7, Den:6, Normalized:false}, IntegerOnly:false}
8	(checked)	5/6 <= X <= 7/6

9	(original)	X is an integer and 5/6 <= X <= 7/6
9	(raw form)	solver.VarIsNumber{V:parser.Variable{Name:"X", Nsp:0}, Min:parser.Number{Num:5, Den:6, Normalized:false}, Max:parser.Number{Num:7, Den:6, Normalized:false}, IntegerOnly:true}
9	(checked)	X = 1

10	(original)	-4/3 <= X <= -7/6
10	(raw form)	solver.VarIsNumber{V:parser.Variable{Name:"X", Nsp:0}, Min:parser.Number{Num:-8, Den:6, Normalized:false}, Max:parser.Number{Num:-7, Den:6, Normalized:false}, IntegerOnly:false}
10	(checked)	-4/3 <= X <= -7/6

11	(original)	X is an integer and -4/3 <= X <= -7/6
11	(raw form)	solver.VarIsNumber{V:parser.Variable{Name:"X", Nsp:0}, Min:parser.Number{Num:-8, Den:6, Normalized:false}, Max:parser.Number{Num:-7, Den:6, Normalized:false}, IntegerOnly:true}
11	(checked)	<nil>, error : invalid constraint, specified range is empty

12	(original)	X$2 =foo
12	(raw form)	solver.VarIsAtom{V:parser.Variable{Name:"X", Nsp:2}, A:parser.Atom{Value:"foo"}}
12	(checked)	X$2 =foo

13	(original)	X$2 = "hello world"
13	(raw form)	solver.VarIsString{V:parser.Variable{Name:"X", Nsp:2}, S:"hello world"}
13	(checked)	X$2 = "hello world"

14	(original)	X$2 = X$2
14	(raw form)	solver.VarIsVar{V:parser.Variable{Name:"X", Nsp:2}, W:parser.Variable{Name:"X", Nsp:2}}
14	(checked)	<nil>

15	(original)	X$2 = Z$2
15	(raw form)	solver.VarIsVar{V:parser.Variable{Name:"X", Nsp:2}, W:parser.Variable{Name:"Z", Nsp:2}}
15	(checked)	X$2 = Z$2