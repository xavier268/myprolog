Test name : TestEndToEnd
This file : _endToEnd_test.13.want


Input:	 	// reverse a list
		reverse_list(List, Reversed) :-
    	reverse_list(List, [], Reversed).
		reverse_list([], Acc, Acc).
		reverse_list([Head|Tail], Acc, Reversed) :-
    	reverse_list(Tail, [Head|Acc], Reversed).	
		?- reverse_list([a,_,b,c,d], Reversed).
		
Parsed:	[rule(reverse_list(List, Reversed), reverse_list(List, dot(), Reversed)) rule(reverse_list(dot(), Acc, Acc)) rule(reverse_list(dot(Head, Tail), Acc, Reversed), reverse_list(Tail, dot(Head, Acc), Reversed)) query(reverse_list(dot(a, dot(_, dot(b, dot(c, dot(d, dot()))))), Reversed))]
solution:	[Reversed = [d, c, b, Head$4, a]]
Rules applied : 
rule#1	reverse_list(List, Reversed) :- reverse_list(List, [], Reversed) 
rule#3	reverse_list([Head|Tail], Acc, Reversed) :- reverse_list(Tail, [Head|Acc], Reversed) 
rule#3	reverse_list([Head|Tail], Acc, Reversed) :- reverse_list(Tail, [Head|Acc], Reversed) 
rule#3	reverse_list([Head|Tail], Acc, Reversed) :- reverse_list(Tail, [Head|Acc], Reversed) 
rule#3	reverse_list([Head|Tail], Acc, Reversed) :- reverse_list(Tail, [Head|Acc], Reversed) 
rule#3	reverse_list([Head|Tail], Acc, Reversed) :- reverse_list(Tail, [Head|Acc], Reversed) 
rule#2	reverse_list([], Acc, Acc) :-  


State:	<nil>
