Test name : TestEndToEndDetail
This file : _endToEnd_test.detail.want

==================
Input:	a(a,b). a(X,c) :- X=2 ; X=3 .  ?- a(X,Y).
==================


State:	Constraints : []
Goals : [rule(a(a, b)) rule(a(X, c), or(eq(X, 2/1), eq(X, 3/1))) query(a(X, Y))]
NextRule : 0
Uid : 1
Parent : YES

State:	Constraints : []
Goals : [rule(a(a, b)) rule(a(X, c), or(eq(X, 2/1), eq(X, 3/1))) query(a(X, Y))]
NextRule : 0
Uid : 1
Parent : YES

=========> solution cleaned:	[X = a Y = b]
=========> All constraints :	[Y = b X = a]
=========> Known rules:
rule#1>	a(a, b) :-  
rule#2>	a(X, c) :- or(eq(X, 2), eq(X, 3)) 
=========> Rules applied :
rule#1>	a(a, b) :-  

 State:
Constraints : [Y = b X = a]
Goals : []
NextRule : 0
Uid : 2
Parent : NO


=========> solution cleaned:	[X = 2 Y = c]
=========> All constraints :	[X$2 = 2 Y = c X = 2]
=========> Known rules:
rule#1>	a(a, b) :-  
rule#2>	a(X, c) :- or(eq(X, 2), eq(X, 3)) 
=========> Rules applied :
rule#2>	a(X, c) :- or(eq(X, 2), eq(X, 3)) 

 State:
Constraints : [X$2 = 2 Y = c X = 2]
Goals : []
NextRule : 0
Uid : 3
Parent : NO


=========> solution cleaned:	[X = 3 Y = c]
=========> All constraints :	[X$2 = 3 Y = c X = 3]
=========> Known rules:
rule#1>	a(a, b) :-  
rule#2>	a(X, c) :- or(eq(X, 2), eq(X, 3)) 
=========> Rules applied :
rule#2>	a(X, c) :- or(eq(X, 2), eq(X, 3)) 

 State:
Constraints : [X$2 = 3 Y = c X = 3]
Goals : []
NextRule : 0
Uid : 2
Parent : NO


State:	<nil>
