Test name : TestEndToEndDetail
This file : _endToEnd_test.detail.want

==================
Input:	 	// reverse a list
	reverse_list(List, Reversed) :-
	reverse_list(List, [], Reversed).
	reverse_list([], Acc, Acc).
	reverse_list([Head|Tail], Acc, Reversed) :-
	reverse_list(Tail, [Head|Acc], Reversed).	
	?- reverse_list([a,X,Y], Reversed).
	
==================


State:	State: 
Rules :
Constraints : []
Goals : [rule(reverse_list(List, Reversed), reverse_list(List, dot(), Reversed)) rule(reverse_list(dot(), Acc, Acc)) rule(reverse_list(dot(Head, Tail), Acc, Reversed), reverse_list(Tail, dot(Head, Acc), Reversed)) query(reverse_list(dot(a, dot(X, dot(Y, dot()))), Reversed))]
NextRule : 0
Uid : 1
Parent : YES

State:	State: 
Rules :
Constraints : []
Goals : [rule(reverse_list(List, Reversed), reverse_list(List, dot(), Reversed)) rule(reverse_list(dot(), Acc, Acc)) rule(reverse_list(dot(Head, Tail), Acc, Reversed), reverse_list(Tail, dot(Head, Acc), Reversed)) query(reverse_list(dot(a, dot(X, dot(Y, dot()))), Reversed))]
NextRule : 0
Uid : 1
Parent : YES

State: 
Rules :
reverse_list(List, Reversed) :- reverse_list(List, [], Reversed) 
reverse_list([], Acc, Acc) :-  
reverse_list([Head|Tail], Acc, Reversed) :- reverse_list(Tail, [Head|Acc], Reversed) 
Constraints : [Acc$6 = [Y, X, a] Tail$5 = [] Reversed$5 = [Y, X, a] Head$5 = Y Acc$5 = [X, a] Tail$4 = [Y] Reversed$4 = [Y, X, a] Head$4 = X Acc$4 = [a] Tail$3 = [X, Y] Reversed$3 = [Y, X, a] Head$3 = a Acc$3 = [] Reversed$2 = [Y, X, a] List$2 = [a, X, Y] Reversed = [Y, X, a]]
Goals : []
NextRule : 0
Uid : 6
Parent : NO



=========> solution:	[Acc$6 = [Y, X, a] Tail$5 = [] Reversed$5 = [Y, X, a] Head$5 = Y Acc$5 = [X, a] Tail$4 = [Y] Reversed$4 = [Y, X, a] Head$4 = X Acc$4 = [a] Tail$3 = [X, Y] Reversed$3 = [Y, X, a] Head$3 = a Acc$3 = [] Reversed$2 = [Y, X, a] List$2 = [a, X, Y] Reversed = [Y, X, a]]


=========> solution cleaned:	[Reversed = [Y, X, a]]

State:	<nil>
