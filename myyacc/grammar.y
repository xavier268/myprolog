// expression grammar for MyProlog


%{
 
 // Autogenerated file - DO NOT EDIT
 package myyacc

 import (
    "fmt"
    "io"
    "github.com/xavier268/myprolog/config"
 )

%}




%union{
    // define the SymType structure
    list []Term // list of Terms
    value  Term // single Term
}

%type <list> top params
%type <value> phrase head disjterms conjterms conjterm 
%type <value> compterm number list param


%token <name> '(' ')' '.' ',' ';' '[' ']' '|' '_'
%token <name> OPRULE OPQUERY
%token <name> ATOM STRING INTEGER FLOAT VARIABLE

%% 

top:
    phrase                              { $$ = append($$, $1)}
    | top phrase                        { $$ = append($$, $1)}

phrase: 
    OPQUERY compterm '.'                { 
                                        $$ = &CompoundTerm{
                                                Functor : OPQUERY, 
                                                Children: []Term{ $1} 
                                                }
                                        }
    | compterm '.'                      { 
                                        $$ = &CompoundTerm{
                                                Functor : OPRULE,
                                                Children: []Term{ $1} 
                                                }
                                        }
    | compterm OPRULE '.'               { 
                                        $$ = &CompoundTerm{
                                                Functor : OPRULE,
                                                Children: []Term{ $1} 
                                                }
                                        }
    | compterm OPRULE disjterms '.'     { 
                                        $$ = &CompoundTerm{
                                                Functor : OPRULE,
                                                Children: []Term{ $1, $3}) 
                                                }
                                        }

head: 
    compterm                            { $$ = $1 }

disjterms:
    conjterms                           { $$ = $1 }
    | conjterms ';' disjterms           { $$ = &CompondTerm{
                                                Functor : ';'
                                                Children : []Term{ $1, $2}
                                                }
                                        }

conjterms:
    conjterm                            { $$ = $1 }
    | conjterm ',' conjterms            { $$ = &CompoundTerm {
                                                Functor : ','
                                                Children: []Term{$1 , $3}
                                                }
                                        }

conjterm:
    ATOM
    | compterm

compterm:
    ATOM '(' params ')'                 { $$ = &CompoundTerm {
                                                Functor : $1.String()
                                                Children : $3.Children
                                                }
                                        }
    | list                              

params:                                 
    param                               
    | param ',' params

param:
    ATOM
    | number
    | STRING
    | VARIABLE
    | '_'
    | compterm

number:
    INTEGER
    | FLOAT


list: 
    '[' ']'
    | '['  params ']'
    | '[' param '|' param ']'


%%
