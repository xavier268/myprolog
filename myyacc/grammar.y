// expression grammar for MyProlog


%{
 
 // Autogenerated file - DO NOT EDIT
 package myyacc

 import (
    "fmt"
    "io"
    "github.com/xavier268/myprolog/config"
 )

%}




%union{
    // define the SymType structure
    name string // the raw token text content
}

%type  <name> term top

%token <name> '(' ')' '.' ',' ';'
%token <name> ATOM STRING RULEOP QUERYOP INT

%% 

top:
    term '.'      {             $$ = $1; fmt.Println($1) ;}

term: term ';' term   {    $$ = $1 + $3; fmt.Println($1); }
    | term ',' term   {         $$ = $1 + $3; fmt.Println($1); }
    | ATOM '('  term ')'   {    $$ = $1 + $3; fmt.Println($1); }
    | INT   {                   $$ = $1; fmt.Println($1); }
    | ATOM    {                 $$ = $1; fmt.Println($1); }
    | STRING      {             $$ = $1; fmt.Println($1);   }


%%

func Parse( c *config.Config, r io.Reader) (tt [] config.Term, err error) {

    lx := newLexer(c , r)
    res := myParse(lx)
    if res != 0 {
        return nil, fmt.Errorf("error parsing source data")
    }
    return nil, nil // TODO - how to build the parse tree ?
    
}

func ParseString(c *config.Config, data string) (tt [] config.Term, err error) {
    panic("todo")
}

func ParseFile( c *config.Config, fileName string) (tt [] config.Term, err error) {
    panic("todo")
}
