// Code generated by goyacc -o parser.go -p my grammar.y. DO NOT EDIT.

//line grammar.y:4

package parser

import __yyfmt__ "fmt"

//line grammar.y:7

import ()

// init global variables
func init() {
	// Set verbose error
	myErrorVerbose = true
	// set debug level
	myDebug = 0
}

// where the parse results are available
var lastParseResult []Term

// To keep the compiler happy ...
var _ = __yyfmt__.Printf

//line grammar.y:28
type mySymType struct {
	yys int
	// define the SymType structure
	list  []Term // list of Terms
	value Term   // single Term
}

const OPRULE = 57346
const OPQUERY = 57347
const ATOM = 57348
const STRING = 57349
const NUMBER = 57350
const VARIABLE = 57351
const LEXERROR = 57352

var myToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"'('",
	"')'",
	"'.'",
	"','",
	"';'",
	"'['",
	"']'",
	"'|'",
	"'_'",
	"'='",
	"OPRULE",
	"OPQUERY",
	"ATOM",
	"STRING",
	"NUMBER",
	"VARIABLE",
	"LEXERROR",
	"'-'",
}

var myStatenames = [...]string{}

const myEofCode = 1
const myErrCode = 2
const myInitialStackSize = 16

//line grammar.y:179

//line yacctab:1
var myExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
	-1, 14,
	13, 23,
	-2, 14,
	-1, 15,
	13, 28,
	-2, 15,
}

const myPrivate = 57344

const myLast = 109

var myAct = [...]int8{
	17, 36, 28, 35, 31, 7, 12, 7, 11, 15,
	29, 9, 52, 43, 21, 53, 24, 44, 30, 19,
	22, 20, 42, 23, 25, 9, 33, 41, 43, 39,
	15, 4, 6, 34, 38, 48, 47, 32, 15, 15,
	49, 46, 45, 40, 41, 51, 50, 9, 26, 3,
	21, 16, 10, 18, 30, 19, 22, 20, 37, 23,
	8, 9, 5, 13, 21, 2, 1, 0, 14, 19,
	22, 20, 0, 23, 9, 27, 0, 21, 0, 0,
	0, 30, 19, 22, 20, 9, 23, 0, 21, 0,
	0, 0, 30, 19, 22, 20, 9, 23, 0, 21,
	0, 0, 0, 14, 19, 22, 20, 0, 23,
}

var myPact = [...]int16{
	16, -1000, 16, -1000, 87, 10, 44, -1000, -1000, 65,
	-1000, 31, 18, 26, 44, -1000, -1000, -10, -1000, -1000,
	-1000, -1000, -1000, -17, -1000, 52, 38, -1000, 12, 6,
	44, -1000, -1000, 87, 87, 76, -1000, -1000, 29, 35,
	-1000, 21, -1000, 76, 2, -1000, -1000, -1000, -1000, -1000,
	-1000, 5, -1000, -1000,
}

var myPgo = [...]int8{
	0, 66, 65, 2, 49, 8, 6, 63, 62, 4,
	60, 0, 53, 51,
}

var myR1 = [...]int8{
	0, 1, 2, 2, 4, 4, 4, 4, 8, 8,
	5, 5, 6, 6, 7, 7, 7, 13, 9, 9,
	9, 3, 3, 11, 11, 11, 11, 11, 11, 10,
	10, 10, 10, 12, 12,
}

var myR2 = [...]int8{
	0, 1, 1, 2, 3, 2, 3, 4, 1, 1,
	1, 3, 1, 3, 1, 1, 1, 3, 4, 3,
	1, 1, 3, 1, 1, 1, 1, 1, 1, 2,
	3, 5, 4, 1, 2,
}

var myChk = [...]int16{
	-1000, -1, -2, -4, 15, -8, 16, -9, -10, 9,
	-4, -5, -6, -7, 16, -9, -13, -11, -12, 17,
	19, 12, 18, 21, 6, 14, 4, 10, -3, -11,
	16, -9, 6, 8, 7, 13, 18, 6, -5, -3,
	5, -11, 10, 7, 11, -5, -6, -11, 6, 5,
	-3, -11, 10, 10,
}

var myDef = [...]int8{
	0, -2, 1, 2, 0, 0, 8, 9, 20, 0,
	3, 0, 10, 12, -2, -2, 16, 0, 24, 25,
	26, 27, 33, 0, 5, 0, 0, 29, 0, 21,
	23, 28, 4, 0, 0, 0, 34, 6, 0, 0,
	19, 21, 30, 0, 0, 11, 13, 17, 7, 18,
	22, 0, 32, 31,
}

var myTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 5, 3, 3, 7, 21, 6, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 8,
	3, 13, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 9, 3, 10, 3, 12, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 11,
}

var myTok2 = [...]int8{
	2, 3, 14, 15, 16, 17, 18, 19, 20,
}

var myTok3 = [...]int8{
	0,
}

var myErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	myDebug        = 0
	myErrorVerbose = false
)

type myLexer interface {
	Lex(lval *mySymType) int
	Error(s string)
}

type myParser interface {
	Parse(myLexer) int
	Lookahead() int
}

type myParserImpl struct {
	lval  mySymType
	stack [myInitialStackSize]mySymType
	char  int
}

func (p *myParserImpl) Lookahead() int {
	return p.char
}

func myNewParser() myParser {
	return &myParserImpl{}
}

const myFlag = -1000

func myTokname(c int) string {
	if c >= 1 && c-1 < len(myToknames) {
		if myToknames[c-1] != "" {
			return myToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func myStatname(s int) string {
	if s >= 0 && s < len(myStatenames) {
		if myStatenames[s] != "" {
			return myStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func myErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !myErrorVerbose {
		return "syntax error"
	}

	for _, e := range myErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + myTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(myPact[state])
	for tok := TOKSTART; tok-1 < len(myToknames); tok++ {
		if n := base + tok; n >= 0 && n < myLast && int(myChk[int(myAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if myDef[state] == -2 {
		i := 0
		for myExca[i] != -1 || int(myExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; myExca[i] >= 0; i += 2 {
			tok := int(myExca[i])
			if tok < TOKSTART || myExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if myExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += myTokname(tok)
	}
	return res
}

func mylex1(lex myLexer, lval *mySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(myTok1[0])
		goto out
	}
	if char < len(myTok1) {
		token = int(myTok1[char])
		goto out
	}
	if char >= myPrivate {
		if char < myPrivate+len(myTok2) {
			token = int(myTok2[char-myPrivate])
			goto out
		}
	}
	for i := 0; i < len(myTok3); i += 2 {
		token = int(myTok3[i+0])
		if token == char {
			token = int(myTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(myTok2[1]) /* unknown char */
	}
	if myDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", myTokname(token), uint(char))
	}
	return char, token
}

func myParse(mylex myLexer) int {
	return myNewParser().Parse(mylex)
}

func (myrcvr *myParserImpl) Parse(mylex myLexer) int {
	var myn int
	var myVAL mySymType
	var myDollar []mySymType
	_ = myDollar // silence set and not used
	myS := myrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	mystate := 0
	myrcvr.char = -1
	mytoken := -1 // myrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		mystate = -1
		myrcvr.char = -1
		mytoken = -1
	}()
	myp := -1
	goto mystack

ret0:
	return 0

ret1:
	return 1

mystack:
	/* put a state and value onto the stack */
	if myDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", myTokname(mytoken), myStatname(mystate))
	}

	myp++
	if myp >= len(myS) {
		nyys := make([]mySymType, len(myS)*2)
		copy(nyys, myS)
		myS = nyys
	}
	myS[myp] = myVAL
	myS[myp].yys = mystate

mynewstate:
	myn = int(myPact[mystate])
	if myn <= myFlag {
		goto mydefault /* simple state */
	}
	if myrcvr.char < 0 {
		myrcvr.char, mytoken = mylex1(mylex, &myrcvr.lval)
	}
	myn += mytoken
	if myn < 0 || myn >= myLast {
		goto mydefault
	}
	myn = int(myAct[myn])
	if int(myChk[myn]) == mytoken { /* valid shift */
		myrcvr.char = -1
		mytoken = -1
		myVAL = myrcvr.lval
		mystate = myn
		if Errflag > 0 {
			Errflag--
		}
		goto mystack
	}

mydefault:
	/* default state action */
	myn = int(myDef[mystate])
	if myn == -2 {
		if myrcvr.char < 0 {
			myrcvr.char, mytoken = mylex1(mylex, &myrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if myExca[xi+0] == -1 && int(myExca[xi+1]) == mystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			myn = int(myExca[xi+0])
			if myn < 0 || myn == mytoken {
				break
			}
		}
		myn = int(myExca[xi+1])
		if myn < 0 {
			goto ret0
		}
	}
	if myn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			mylex.Error(myErrorMessage(mystate, mytoken))
			Nerrs++
			if myDebug >= 1 {
				__yyfmt__.Printf("%s", myStatname(mystate))
				__yyfmt__.Printf(" saw %s\n", myTokname(mytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for myp >= 0 {
				myn = int(myPact[myS[myp].yys]) + myErrCode
				if myn >= 0 && myn < myLast {
					mystate = int(myAct[myn]) /* simulate a shift of "error" */
					if int(myChk[mystate]) == myErrCode {
						goto mystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if myDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", myS[myp].yys)
				}
				myp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if myDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", myTokname(mytoken))
			}
			if mytoken == myEofCode {
				goto ret1
			}
			myrcvr.char = -1
			mytoken = -1
			goto mynewstate /* try again in the same state */
		}
	}

	/* reduction by production myn */
	if myDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", myn, myStatname(mystate))
	}

	mynt := myn
	mypt := myp
	_ = mypt // guard against "declared and not used"

	myp -= int(myR2[myn])
	// myp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if myp+1 >= len(myS) {
		nyys := make([]mySymType, len(myS)*2)
		copy(nyys, myS)
		myS = nyys
	}
	myVAL = myS[myp+1]

	/* consult goto table to find next state */
	myn = int(myR1[myn])
	myg := int(myPgo[myn])
	myj := myg + myS[myp].yys + 1

	if myj >= myLast {
		mystate = int(myAct[myg])
	} else {
		mystate = int(myAct[myj])
		if int(myChk[mystate]) != -myn {
			mystate = int(myAct[myg])
		}
	}
	// dummy call; replaced with literal code
	switch mynt {

	case 1:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:47
		{
			myVAL.list = myDollar[1].list
			// save final result in the provided variable, results
			lastParseResult = myVAL.list
		}
	case 2:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:54
		{
			myVAL.list = append(myVAL.list, myDollar[1].value)
		}
	case 3:
		myDollar = myS[mypt-2 : mypt+1]
//line grammar.y:55
		{
			myVAL.list = append(myDollar[1].list, myDollar[2].value)
		}
	case 4:
		myDollar = myS[mypt-3 : mypt+1]
//line grammar.y:58
		{
			myVAL.value = CompoundTerm{
				Functor:  "query",
				Children: []Term{myDollar[2].value},
			}
		}
	case 5:
		myDollar = myS[mypt-2 : mypt+1]
//line grammar.y:64
		{ // implicit OPRULE
			myVAL.value = CompoundTerm{
				Functor:  "rule",
				Children: []Term{myDollar[1].value},
			}
		}
	case 6:
		myDollar = myS[mypt-3 : mypt+1]
//line grammar.y:70
		{
			myVAL.value = CompoundTerm{
				Functor:  "rule",
				Children: []Term{myDollar[1].value},
			}
		}
	case 7:
		myDollar = myS[mypt-4 : mypt+1]
//line grammar.y:76
		{
			myVAL.value = CompoundTerm{
				Functor:  "rule",
				Children: []Term{myDollar[1].value, myDollar[3].value},
			}
		}
	case 8:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:85
		{
			myVAL.value = myDollar[1].value
		}
	case 9:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:86
		{
			myVAL.value = myDollar[1].value
		}
	case 10:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:91
		{
			myVAL.value = myDollar[1].value
		}
	case 11:
		myDollar = myS[mypt-3 : mypt+1]
//line grammar.y:92
		{
			myVAL.value = CompoundTerm{
				Functor:  "or",
				Children: []Term{myDollar[1].value, myDollar[3].value},
			}
		}
	case 12:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:99
		{
			myVAL.value = myDollar[1].value
		}
	case 13:
		myDollar = myS[mypt-3 : mypt+1]
//line grammar.y:100
		{
			myVAL.value = CompoundTerm{
				Functor:  "and",
				Children: []Term{myDollar[1].value, myDollar[3].value},
			}
		}
	case 14:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:107
		{
			myVAL.value = myDollar[1].value
		}
	case 15:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:108
		{
			myVAL.value = myDollar[1].value
		}
	case 16:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:109
		{
			myVAL.value = myDollar[1].value
		}
	case 17:
		myDollar = myS[mypt-3 : mypt+1]
//line grammar.y:112
		{
			myVAL.value = CompoundTerm{
				Functor:  "eq",
				Children: []Term{myDollar[1].value, myDollar[3].value},
			}
		}
	case 18:
		myDollar = myS[mypt-4 : mypt+1]
//line grammar.y:120
		{
			myVAL.value = CompoundTerm{
				Functor:  myDollar[1].value.String(),
				Children: myDollar[3].list,
			}
		}
	case 19:
		myDollar = myS[mypt-3 : mypt+1]
//line grammar.y:125
		{
			myVAL.value = CompoundTerm{
				Functor: myDollar[1].value.String(),
			}
		}
	case 20:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:130
		{
			myVAL.value = myDollar[1].value
		}
	case 21:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:135
		{
			myVAL.list = []Term{myDollar[1].value}
		}
	case 22:
		myDollar = myS[mypt-3 : mypt+1]
//line grammar.y:136
		{
			myVAL.list = append([]Term{myDollar[1].value}, myDollar[3].list...)
		}
	case 23:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:141
		{
			myVAL.value = myDollar[1].value
		}
	case 24:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:142
		{
			myVAL.value = myDollar[1].value
		}
	case 25:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:143
		{
			myVAL.value = myDollar[1].value
		}
	case 26:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:144
		{
			myVAL.value = myDollar[1].value
		}
	case 27:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:145
		{
			myVAL.value = myDollar[1].value
		}
	case 28:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:146
		{
			myVAL.value = myDollar[1].value
		}
	case 29:
		myDollar = myS[mypt-2 : mypt+1]
//line grammar.y:150
		{
			myVAL.value = CompoundTerm{
				Functor:  "dot",
				Children: []Term{},
			}
		}
	case 30:
		myDollar = myS[mypt-3 : mypt+1]
//line grammar.y:155
		{
			myVAL.value = newList(myDollar[2].list...)
		}
	case 31:
		myDollar = myS[mypt-5 : mypt+1]
//line grammar.y:158
		{
			myVAL.value = CompoundTerm{
				Functor:  "dot",
				Children: []Term{myDollar[2].value, myDollar[4].value},
			}
		}
	case 32:
		myDollar = myS[mypt-4 : mypt+1]
//line grammar.y:163
		{
			myVAL.value = CompoundTerm{
				Functor:  "dot",
				Children: []Term{myDollar[2].value},
			}
		}
	case 33:
		myDollar = myS[mypt-1 : mypt+1]
//line grammar.y:171
		{
			myVAL.value = myDollar[1].value
		}
	case 34:
		myDollar = myS[mypt-2 : mypt+1]
//line grammar.y:172
		{
			myVAL.value = Number{
				Num: -myDollar[2].value.(Number).Num,
				Den: myDollar[2].value.(Number).Den,
			}
		}
	}
	goto mystack /* stack new state and value */
}
