// Code generated by goyacc -o myparser.go -p My grammar.y. DO NOT EDIT.

//line grammar.y:4

// Autogenerated file - DO NOT EDIT
package parser

import __yyfmt__ "fmt"

//line grammar.y:8

import (
	"fmt"
)

// To keep the copiler happy ...
var _ = __yyfmt__.Printf

//line grammar.y:19
type MySymType struct {
	yys int
	// define the SymType structure
	list  []Term // list of Terms
	value Term   // single Term
}

const OPRULE = 57346
const OPQUERY = 57347
const ATOM = 57348
const STRING = 57349
const INTEGER = 57350
const FLOAT = 57351
const VARIABLE = 57352

var MyToknames = [...]string{
	"$end",
	"error",
	"$unk",
	"'('",
	"')'",
	"'.'",
	"','",
	"';'",
	"'['",
	"']'",
	"'|'",
	"'_'",
	"OPRULE",
	"OPQUERY",
	"ATOM",
	"STRING",
	"INTEGER",
	"FLOAT",
	"VARIABLE",
}

var MyStatenames = [...]string{}

const MyEofCode = 1
const MyErrCode = 2
const MyInitialStackSize = 16

//line grammar.y:138

//line yacctab:1
var MyExca = [...]int8{
	-1, 1,
	1, -1,
	-2, 0,
}

const MyPrivate = 57344

const MyLast = 69

var MyAct = [...]int8{
	21, 4, 4, 27, 9, 26, 14, 7, 32, 45,
	33, 37, 30, 29, 7, 42, 15, 20, 34, 31,
	16, 18, 22, 23, 19, 7, 13, 25, 20, 38,
	7, 16, 18, 22, 23, 19, 29, 39, 30, 30,
	7, 40, 44, 43, 41, 7, 5, 36, 20, 24,
	10, 16, 18, 22, 23, 19, 7, 11, 12, 34,
	6, 3, 5, 35, 2, 17, 8, 28, 1,
}

var MyPact = [...]int16{
	47, 47, -1000, 31, 44, 54, -1000, 16, -1000, 43,
	-1000, 21, 36, -1000, 0, 52, 54, -1000, -1000, -1000,
	-1000, -1000, -1000, -1000, -1000, -1000, 41, 3, 22, 54,
	-1000, 32, 11, -1000, 36, 5, -1000, -2, -2, -1000,
	-1000, -1, -1000, -1000, -1000, -1000,
}

var MyPgo = [...]int8{
	0, 68, 6, 64, 5, 3, 67, 0, 65, 60,
	8,
}

var MyR1 = [...]int8{
	0, 1, 1, 3, 3, 3, 3, 4, 4, 5,
	5, 6, 6, 7, 7, 2, 2, 10, 10, 10,
	10, 10, 10, 8, 8, 9, 9, 9, 9,
}

var MyR2 = [...]int8{
	0, 1, 2, 3, 2, 3, 4, 1, 3, 1,
	3, 1, 1, 4, 1, 1, 3, 1, 1, 1,
	1, 1, 1, 1, 1, 2, 3, 5, 4,
}

var MyChk = [...]int16{
	-1000, -1, -3, 14, -7, 15, -9, 9, -3, -7,
	6, 13, 4, 10, -2, -10, 15, -8, 16, 19,
	12, -7, 17, 18, 6, 6, -4, -5, -6, 15,
	-7, -2, -10, 10, 7, 11, 6, 8, 7, 5,
	-2, -10, 10, -4, -5, 10,
}

var MyDef = [...]int8{
	0, -2, 1, 0, 0, 0, 14, 0, 2, 0,
	4, 0, 0, 25, 0, 15, 17, 18, 19, 20,
	21, 22, 23, 24, 3, 5, 0, 7, 9, 11,
	12, 0, 15, 26, 0, 0, 6, 0, 0, 13,
	16, 0, 28, 8, 10, 27,
}

var MyTok1 = [...]int8{
	1, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	4, 5, 3, 3, 7, 3, 6, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 8,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 9, 3, 10, 3, 12, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 3, 3, 3, 3, 3, 3,
	3, 3, 3, 3, 11,
}

var MyTok2 = [...]int8{
	2, 3, 13, 14, 15, 16, 17, 18, 19,
}

var MyTok3 = [...]int8{
	0,
}

var MyErrorMessages = [...]struct {
	state int
	token int
	msg   string
}{}

//line yaccpar:1

/*	parser for yacc output	*/

var (
	MyDebug        = 0
	MyErrorVerbose = false
)

type MyLexer interface {
	Lex(lval *MySymType) int
	Error(s string)
}

type MyParser interface {
	Parse(MyLexer) int
	Lookahead() int
}

type MyParserImpl struct {
	lval  MySymType
	stack [MyInitialStackSize]MySymType
	char  int
}

func (p *MyParserImpl) Lookahead() int {
	return p.char
}

func MyNewParser() MyParser {
	return &MyParserImpl{}
}

const MyFlag = -1000

func MyTokname(c int) string {
	if c >= 1 && c-1 < len(MyToknames) {
		if MyToknames[c-1] != "" {
			return MyToknames[c-1]
		}
	}
	return __yyfmt__.Sprintf("tok-%v", c)
}

func MyStatname(s int) string {
	if s >= 0 && s < len(MyStatenames) {
		if MyStatenames[s] != "" {
			return MyStatenames[s]
		}
	}
	return __yyfmt__.Sprintf("state-%v", s)
}

func MyErrorMessage(state, lookAhead int) string {
	const TOKSTART = 4

	if !MyErrorVerbose {
		return "syntax error"
	}

	for _, e := range MyErrorMessages {
		if e.state == state && e.token == lookAhead {
			return "syntax error: " + e.msg
		}
	}

	res := "syntax error: unexpected " + MyTokname(lookAhead)

	// To match Bison, suggest at most four expected tokens.
	expected := make([]int, 0, 4)

	// Look for shiftable tokens.
	base := int(MyPact[state])
	for tok := TOKSTART; tok-1 < len(MyToknames); tok++ {
		if n := base + tok; n >= 0 && n < MyLast && int(MyChk[int(MyAct[n])]) == tok {
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}
	}

	if MyDef[state] == -2 {
		i := 0
		for MyExca[i] != -1 || int(MyExca[i+1]) != state {
			i += 2
		}

		// Look for tokens that we accept or reduce.
		for i += 2; MyExca[i] >= 0; i += 2 {
			tok := int(MyExca[i])
			if tok < TOKSTART || MyExca[i+1] == 0 {
				continue
			}
			if len(expected) == cap(expected) {
				return res
			}
			expected = append(expected, tok)
		}

		// If the default action is to accept or reduce, give up.
		if MyExca[i+1] != 0 {
			return res
		}
	}

	for i, tok := range expected {
		if i == 0 {
			res += ", expecting "
		} else {
			res += " or "
		}
		res += MyTokname(tok)
	}
	return res
}

func Mylex1(lex MyLexer, lval *MySymType) (char, token int) {
	token = 0
	char = lex.Lex(lval)
	if char <= 0 {
		token = int(MyTok1[0])
		goto out
	}
	if char < len(MyTok1) {
		token = int(MyTok1[char])
		goto out
	}
	if char >= MyPrivate {
		if char < MyPrivate+len(MyTok2) {
			token = int(MyTok2[char-MyPrivate])
			goto out
		}
	}
	for i := 0; i < len(MyTok3); i += 2 {
		token = int(MyTok3[i+0])
		if token == char {
			token = int(MyTok3[i+1])
			goto out
		}
	}

out:
	if token == 0 {
		token = int(MyTok2[1]) /* unknown char */
	}
	if MyDebug >= 3 {
		__yyfmt__.Printf("lex %s(%d)\n", MyTokname(token), uint(char))
	}
	return char, token
}

func MyParse(Mylex MyLexer) int {
	return MyNewParser().Parse(Mylex)
}

func (Myrcvr *MyParserImpl) Parse(Mylex MyLexer) int {
	var Myn int
	var MyVAL MySymType
	var MyDollar []MySymType
	_ = MyDollar // silence set and not used
	MyS := Myrcvr.stack[:]

	Nerrs := 0   /* number of errors */
	Errflag := 0 /* error recovery flag */
	Mystate := 0
	Myrcvr.char = -1
	Mytoken := -1 // Myrcvr.char translated into internal numbering
	defer func() {
		// Make sure we report no lookahead when not parsing.
		Mystate = -1
		Myrcvr.char = -1
		Mytoken = -1
	}()
	Myp := -1
	goto Mystack

ret0:
	return 0

ret1:
	return 1

Mystack:
	/* put a state and value onto the stack */
	if MyDebug >= 4 {
		__yyfmt__.Printf("char %v in %v\n", MyTokname(Mytoken), MyStatname(Mystate))
	}

	Myp++
	if Myp >= len(MyS) {
		nyys := make([]MySymType, len(MyS)*2)
		copy(nyys, MyS)
		MyS = nyys
	}
	MyS[Myp] = MyVAL
	MyS[Myp].yys = Mystate

Mynewstate:
	Myn = int(MyPact[Mystate])
	if Myn <= MyFlag {
		goto Mydefault /* simple state */
	}
	if Myrcvr.char < 0 {
		Myrcvr.char, Mytoken = Mylex1(Mylex, &Myrcvr.lval)
	}
	Myn += Mytoken
	if Myn < 0 || Myn >= MyLast {
		goto Mydefault
	}
	Myn = int(MyAct[Myn])
	if int(MyChk[Myn]) == Mytoken { /* valid shift */
		Myrcvr.char = -1
		Mytoken = -1
		MyVAL = Myrcvr.lval
		Mystate = Myn
		if Errflag > 0 {
			Errflag--
		}
		goto Mystack
	}

Mydefault:
	/* default state action */
	Myn = int(MyDef[Mystate])
	if Myn == -2 {
		if Myrcvr.char < 0 {
			Myrcvr.char, Mytoken = Mylex1(Mylex, &Myrcvr.lval)
		}

		/* look through exception table */
		xi := 0
		for {
			if MyExca[xi+0] == -1 && int(MyExca[xi+1]) == Mystate {
				break
			}
			xi += 2
		}
		for xi += 2; ; xi += 2 {
			Myn = int(MyExca[xi+0])
			if Myn < 0 || Myn == Mytoken {
				break
			}
		}
		Myn = int(MyExca[xi+1])
		if Myn < 0 {
			goto ret0
		}
	}
	if Myn == 0 {
		/* error ... attempt to resume parsing */
		switch Errflag {
		case 0: /* brand new error */
			Mylex.Error(MyErrorMessage(Mystate, Mytoken))
			Nerrs++
			if MyDebug >= 1 {
				__yyfmt__.Printf("%s", MyStatname(Mystate))
				__yyfmt__.Printf(" saw %s\n", MyTokname(Mytoken))
			}
			fallthrough

		case 1, 2: /* incompletely recovered error ... try again */
			Errflag = 3

			/* find a state where "error" is a legal shift action */
			for Myp >= 0 {
				Myn = int(MyPact[MyS[Myp].yys]) + MyErrCode
				if Myn >= 0 && Myn < MyLast {
					Mystate = int(MyAct[Myn]) /* simulate a shift of "error" */
					if int(MyChk[Mystate]) == MyErrCode {
						goto Mystack
					}
				}

				/* the current p has no shift on "error", pop stack */
				if MyDebug >= 2 {
					__yyfmt__.Printf("error recovery pops state %d\n", MyS[Myp].yys)
				}
				Myp--
			}
			/* there is no state on the stack with an error shift ... abort */
			goto ret1

		case 3: /* no shift yet; clobber input char */
			if MyDebug >= 2 {
				__yyfmt__.Printf("error recovery discards %s\n", MyTokname(Mytoken))
			}
			if Mytoken == MyEofCode {
				goto ret1
			}
			Myrcvr.char = -1
			Mytoken = -1
			goto Mynewstate /* try again in the same state */
		}
	}

	/* reduction by production Myn */
	if MyDebug >= 2 {
		__yyfmt__.Printf("reduce %v in:\n\t%v\n", Myn, MyStatname(Mystate))
	}

	Mynt := Myn
	Mypt := Myp
	_ = Mypt // guard against "declared and not used"

	Myp -= int(MyR2[Myn])
	// Myp is now the index of $0. Perform the default action. Iff the
	// reduced production is Îµ, $1 is possibly out of range.
	if Myp+1 >= len(MyS) {
		nyys := make([]MySymType, len(MyS)*2)
		copy(nyys, MyS)
		MyS = nyys
	}
	MyVAL = MyS[Myp+1]

	/* consult goto table to find next state */
	Myn = int(MyR1[Myn])
	Myg := int(MyPgo[Myn])
	Myj := Myg + MyS[Myp].yys + 1

	if Myj >= MyLast {
		Mystate = int(MyAct[Myg])
	} else {
		Mystate = int(MyAct[Myj])
		if int(MyChk[Mystate]) != -Myn {
			Mystate = int(MyAct[Myg])
		}
	}
	// dummy call; replaced with literal code
	switch Mynt {

	case 1:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:37
		{
			MyVAL.list = append(MyVAL.list, MyDollar[1].value)
		}
	case 2:
		MyDollar = MyS[Mypt-2 : Mypt+1]
//line grammar.y:38
		{
			MyVAL.list = append(MyDollar[1].list, MyDollar[2].value)
		}
	case 3:
		MyDollar = MyS[Mypt-3 : Mypt+1]
//line grammar.y:41
		{
			MyVAL.value = &CompoundTerm{
				Functor:  fmt.Sprintf("%c", OPQUERY),
				Children: []Term{MyDollar[1].value},
			}
		}
	case 4:
		MyDollar = MyS[Mypt-2 : Mypt+1]
//line grammar.y:47
		{
			MyVAL.value = &CompoundTerm{
				Functor:  fmt.Sprintf("%c", OPRULE),
				Children: []Term{MyDollar[1].value},
			}
		}
	case 5:
		MyDollar = MyS[Mypt-3 : Mypt+1]
//line grammar.y:53
		{
			MyVAL.value = &CompoundTerm{
				Functor:  fmt.Sprintf("%c", OPRULE),
				Children: []Term{MyDollar[1].value},
			}
		}
	case 6:
		MyDollar = MyS[Mypt-4 : Mypt+1]
//line grammar.y:59
		{
			MyVAL.value = &CompoundTerm{
				Functor:  fmt.Sprintf("%c", OPRULE),
				Children: []Term{MyDollar[1].value, MyDollar[3].value},
			}
		}
	case 7:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:67
		{
			MyVAL.value = MyDollar[1].value
		}
	case 8:
		MyDollar = MyS[Mypt-3 : Mypt+1]
//line grammar.y:68
		{
			MyVAL.value = &CompoundTerm{
				Functor:  ";",
				Children: []Term{MyDollar[1].value, MyDollar[2].value},
			}
		}
	case 9:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:75
		{
			MyVAL.value = MyDollar[1].value
		}
	case 10:
		MyDollar = MyS[Mypt-3 : Mypt+1]
//line grammar.y:76
		{
			MyVAL.value = &CompoundTerm{
				Functor:  ",",
				Children: []Term{MyDollar[1].value, MyDollar[3].value},
			}
		}
	case 11:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:83
		{
			MyVAL.value = MyDollar[1].value
		}
	case 12:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:84
		{
			MyVAL.value = MyDollar[1].value
		}
	case 13:
		MyDollar = MyS[Mypt-4 : Mypt+1]
//line grammar.y:87
		{
			MyVAL.value = &CompoundTerm{
				Functor:  MyDollar[1].value.String(),
				Children: MyDollar[3].list,
			}
		}
	case 14:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:92
		{
			MyVAL.value = MyDollar[1].value
			// TO DO
		}
	case 15:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:98
		{
			MyVAL.list = []Term{MyDollar[1].value}
		}
	case 16:
		MyDollar = MyS[Mypt-3 : Mypt+1]
//line grammar.y:99
		{
			MyVAL.list = append([]Term{MyDollar[1].value}, MyDollar[3].list...)
		}
	case 17:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:104
		{
			MyVAL.value = MyDollar[1].value
		}
	case 18:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:105
		{
			MyVAL.value = MyDollar[1].value
		}
	case 19:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:106
		{
			MyVAL.value = MyDollar[1].value
		}
	case 20:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:107
		{
			MyVAL.value = MyDollar[1].value
		}
	case 21:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:108
		{
			MyVAL.value = MyDollar[1].value
		}
	case 22:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:109
		{
			MyVAL.value = MyDollar[1].value
		}
	case 23:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:112
		{
			MyVAL.value = MyDollar[1].value
		}
	case 24:
		MyDollar = MyS[Mypt-1 : Mypt+1]
//line grammar.y:113
		{
			MyVAL.value = MyDollar[1].value
		}
	case 25:
		MyDollar = MyS[Mypt-2 : Mypt+1]
//line grammar.y:117
		{
			MyVAL.value = &CompoundTerm{
				Functor:  "dot",
				Children: []Term{},
			}
		}
	case 26:
		MyDollar = MyS[Mypt-3 : Mypt+1]
//line grammar.y:122
		{
			MyVAL.value = newList(MyDollar[2].list...)
		}
	case 27:
		MyDollar = MyS[Mypt-5 : Mypt+1]
//line grammar.y:125
		{
			MyVAL.value = &CompoundTerm{
				Functor:  "dot",
				Children: []Term{MyDollar[2].value, MyDollar[4].value},
			}
		}
	case 28:
		MyDollar = MyS[Mypt-4 : Mypt+1]
//line grammar.y:130
		{
			MyVAL.value = &CompoundTerm{
				Functor:  "dot",
				Children: []Term{MyDollar[2].value},
			}
		}
	}
	goto Mystack /* stack new state and value */
}
