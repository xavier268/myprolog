
0 		<un(deux,trois).>
0		err=<nil>
0		(string)    rule(un(deux, trois))
0		(pretty)    un(deux, trois) :-  

1 		<un.>
1		err=<nil>
1		(string)    rule(un)
1		(pretty)    un :-  

2 		<un(deux).>
2		err=<nil>
2		(string)    rule(un(deux))
2		(pretty)    un(deux) :-  

3 		<un(2,3).>
3		err=<nil>
3		(string)    rule(un(2/1, 3/1))
3		(pretty)    un(2.00, 3.00) :-  

4 		<empty().>
4		err=<nil>
4		(string)    rule(empty())
4		(pretty)    empty() :-  

5 		<un(deux(),trois).>
5		err=<nil>
5		(string)    rule(un(deux(), trois))
5		(pretty)    un(deux(), trois) :-  

6 		<a(X):-un(X).>
6		err=<nil>
6		(string)    rule(a(X), un(X))
6		(pretty)    a(X) :- un(X) 

7 		<a(X):-un(X,Y).>
7		err=<nil>
7		(string)    rule(a(X), un(X, Y))
7		(pretty)    a(X) :- un(X, Y) 

8 		<a(X):-un(X,Y,Z);b(Y);c(X).>
8		err=<nil>
8		(string)    rule(a(X), or(un(X, Y, Z), or(b(Y), c(X))))
8		(pretty)    a(X) :- or(un(X, Y, Z), or(b(Y), c(X))) 

9 		<a(X):-un(X,Y,Z),b(Y),c(X).>
9		err=<nil>
9		(string)    rule(a(X), and(un(X, Y, Z), and(b(Y), c(X))))
9		(pretty)    a(X) :- and(un(X, Y, Z), and(b(Y), c(X))) 

10 		<a(X):-un(X,Y,Z);b(Y),c(X).>
10		err=<nil>
10		(string)    rule(a(X), or(un(X, Y, Z), and(b(Y), c(X))))
10		(pretty)    a(X) :- or(un(X, Y, Z), and(b(Y), c(X))) 

11 		<a(X):-un(X,Y,Z),b(Y);c(X).>
11		err=<nil>
11		(string)    rule(a(X), or(and(un(X, Y, Z), b(Y)), c(X)))
11		(pretty)    a(X) :- or(and(un(X, Y, Z), b(Y)), c(X)) 

12 		<a(X):-.>
12		err=<nil>
12		(string)    rule(a(X))
12		(pretty)    a(X) :-  

13 		<?- 3 .>
13		err=error : [error in test # 13 <?- 3 .>, line 1 : syntax error: unexpected NUMBER, expecting '[' or ATOM]

14 		<?- 3.>
14		err=error : [error in test # 14 <?- 3.>, line 1 : syntax error: unexpected NUMBER, expecting '[' or ATOM]

15 		<?- test.>
15		err=<nil>
15		(string)    query(test)
15		(pretty)    ?- test 

16 		<?- un(deux,X).>
16		err=<nil>
16		(string)    query(un(deux, X))
16		(pretty)    ?- un(deux, X) 

17 		<?- un(deux,X), trois(X).>
17		err=<nil>
17		(string)    query(and(un(deux, X), trois(X)))
17		(pretty)    ?- and(un(deux, X), trois(X)) 

18 		<?- un(deux,X); trois(X).>
18		err=<nil>
18		(string)    query(or(un(deux, X), trois(X)))
18		(pretty)    ?- or(un(deux, X), trois(X)) 

19 		<?- un(deux,X); trois(X),quatre(Y,_).>
19		err=<nil>
19		(string)    query(or(un(deux, X), and(trois(X), quatre(Y, _))))
19		(pretty)    ?- or(un(deux, X), and(trois(X), quatre(Y, _))) 

20 		<?- un(deux,X), trois(X);quatre(Y,_).>
20		err=<nil>
20		(string)    query(or(and(un(deux, X), trois(X)), quatre(Y, _)))
20		(pretty)    ?- or(and(un(deux, X), trois(X)), quatre(Y, _)) 

21 		<[].>
21		err=<nil>
21		(string)    rule(dot())
21		(pretty)    [] :-  

22 		<[2].>
22		err=<nil>
22		(string)    rule(dot(2/1, dot()))
22		(pretty)    [2.00] :-  

23 		<[2,3].>
23		err=<nil>
23		(string)    rule(dot(2/1, dot(3/1, dot())))
23		(pretty)    [2.00, 3.00] :-  

24 		<[2,3,4].>
24		err=<nil>
24		(string)    rule(dot(2/1, dot(3/1, dot(4/1, dot()))))
24		(pretty)    [2.00, 3.00, 4.00] :-  

25 		<[[2,3],4].>
25		err=<nil>
25		(string)    rule(dot(dot(2/1, dot(3/1, dot())), dot(4/1, dot())))
25		(pretty)    [[2.00, 3.00], 4.00] :-  

26 		<[2,[3,4]].>
26		err=<nil>
26		(string)    rule(dot(2/1, dot(dot(3/1, dot(4/1, dot())), dot())))
26		(pretty)    [2.00, [3.00, 4.00]] :-  

27 		<[2|3].>
27		err=<nil>
27		(string)    rule(dot(2/1, 3/1))
27		(pretty)    [2.00|3.00] :-  

28 		<[4|].>
28		err=<nil>
28		(string)    rule(dot(4/1))
28		(pretty)    [4.00|] :-  

29 		<[4|X].>
29		err=<nil>
29		(string)    rule(dot(4/1, X))
29		(pretty)    [4.00|X] :-  

30 		<dot(1,dot(2,3)).>
30		err=<nil>
30		(string)    rule(dot(1/1, dot(2/1, 3/1)))
30		(pretty)    [1.00|[2.00|3.00]] :-  

31 		<dot(1,dot(dot(4,dot(5,dot())),3)).>
31		err=<nil>
31		(string)    rule(dot(1/1, dot(dot(4/1, dot(5/1, dot())), 3/1)))
31		(pretty)    [1.00|[[4.00, 5.00]|3.00]] :-  

32 		<un(_,_,X,2).>
32		err=<nil>
32		(string)    rule(un(_, _, X, 2/1))
32		(pretty)    un(_, _, X, 2.00) :-  

33 		<un(_,_,X,2,3).>
33		err=<nil>
33		(string)    rule(un(_, _, X, 2/1, 3/1))
33		(pretty)    un(_, _, X, 2.00, 3.00) :-  

34 		<un(_,_,X,2):-deux(X,_,5.).>
34		err=<nil>
34		(string)    rule(un(_, _, X, 2/1), deux(X, _, 5/1))
34		(pretty)    un(_, _, X, 2.00) :- deux(X, _, 5.00) 

35 		<?-un(_,_,X,2,3),deux(X,_,5.).>
35		err=<nil>
35		(string)    query(and(un(_, _, X, 2/1, 3/1), deux(X, _, 5/1)))
35		(pretty)    ?- and(un(_, _, X, 2.00, 3.00), deux(X, _, 5.00)) 

36 		<?- _.>
36		err=error : [error in test # 36 <?- _.>, line 1 : syntax error: unexpected '_', expecting '[' or ATOM]

37 		<_ .>
37		err=error : [error in test # 37 <_ .>, line 1 : syntax error: unexpected '_', expecting '[' or OPQUERY or ATOM]

38 		<un,deux.>
38		err=error : [error in test # 38 <un,deux.>, line 1 : syntax error: unexpected ',', expecting '.' or OPRULE]

39 		<2(a).>
39		err=error : [error in test # 39 <2(a).>, line 1 : syntax error: unexpected NUMBER, expecting '[' or OPQUERY or ATOM]

40 		< [|2].>
40		err=error : [error in test # 40 < [|2].>, line 1 : syntax error: unexpected '|']

41 		<[|]>
41		err=error : [error in test # 41 <[|]>, line 1 : syntax error: unexpected '|']

42 		<a(b,,).>
42		err=error : [error in test # 42 <a(b,,).>, line 1 : syntax error: unexpected ',']

43 		<:-.>
43		err=error : [error in test # 43 <:-.>, line 1 : syntax error: unexpected OPRULE, expecting '[' or OPQUERY or ATOM]

44 		<3.>
44		err=error : [error in test # 44 <3.>, line 1 : syntax error: unexpected NUMBER, expecting '[' or OPQUERY or ATOM]

45 		<3.0.>
45		err=error : [error in test # 45 <3.0.>, line 1 : syntax error: unexpected NUMBER, expecting '[' or OPQUERY or ATOM]

46 		<3/4.>
46		err=error : [error in test # 46 <3/4.>, line 1 : syntax error: unexpected NUMBER, expecting '[' or OPQUERY or ATOM]

47 		<3/4000.>
47		err=error : [error in test # 47 <3/4000.>, line 1 : syntax error: unexpected NUMBER, expecting '[' or OPQUERY or ATOM]

48 		<3/4.0.>
48		err=error : [error in test # 48 <3/4.0.>, line 1 : syntax error: unexpected NUMBER, expecting '[' or OPQUERY or ATOM]

49 		<-3/4.>
49		err=error : [error in test # 49 <-3/4.>, line 1 : syntax error: unexpected '-', expecting '[' or OPQUERY or ATOM]

50 		<-3/-4.>
50		err=error : [error in test # 50 <-3/-4.>, line 1 : syntax error: unexpected '-', expecting '[' or OPQUERY or ATOM]
