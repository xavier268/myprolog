// expression grammar for MyProlog


%{
 
 // Autogenerated file - DO NOT EDIT
 package parser


 import (
    "fmt"
 )

// To keep the copiler happy ...
 var _ = __yyfmt__.Printf

%}

%union{
    // define the SymType structure
    list []Term // list of Terms
    value  Term // single Term
}

%type <list> top params
%type <value> phrase disjterms conjterms conjterm 
%type <value> compterm number list param


%token <value> '(' ')' '.' ',' ';' '[' ']' '|' '_'
%token <value> OPRULE OPQUERY // :-  and ?-
%token <value> ATOM STRING INTEGER FLOAT VARIABLE

%% 

top:
    phrase                              { $$ = append( $$ , $1 )}
    | top phrase                        { $$ = append( $1 , $2 )}

phrase: 
    OPQUERY compterm '.'                { 
                                        $$ = &CompoundTerm{  
                                                Functor : fmt.Sprintf("%c",OPQUERY), 
                                                Children: []Term{$1},
                                                }                                                
                                        }
    | compterm '.'                      { 
                                        $$ = &CompoundTerm{
                                                Functor : fmt.Sprintf("%c",OPRULE), 
                                                Children: []Term{ $1 } ,
                                                };
                                        }
    | compterm OPRULE '.'               { 
                                        $$ = &CompoundTerm{
                                                Functor : fmt.Sprintf("%c",OPRULE), 
                                                Children: []Term{ $1} ,
                                                };
                                        }
    | compterm OPRULE disjterms '.'     { 
                                        $$ = &CompoundTerm{
                                                Functor : fmt.Sprintf("%c",OPRULE), 
                                                Children: []Term{ $1, $3},
                                                }
                                        }

disjterms:
    conjterms                           { $$ = $1 }
    | conjterms ';' disjterms           { $$ = &CompoundTerm{
                                                Functor : ";",
                                                Children : []Term{ $1, $2},
                                                }
                                        }

conjterms:
    conjterm                            { $$ = $1 }
    | conjterm ',' conjterms            { $$ = &CompoundTerm {
                                                Functor : ",",
                                                Children: []Term{$1 , $3},
                                                }
                                        }

conjterm:
    ATOM                                { $$ = $1 }
    | compterm                          { $$ = $1 }

compterm:
    ATOM '(' params ')'                 { $$ = &CompoundTerm {
                                                Functor : $1.String(),
                                                Children : $3,
                                                }
                                        }
    | list                              { 
                                            $$ = $1 
                                            // TO DO 
                                        }

params:                                 
    param                               { $$ = []Term{ $1 } }
    | param ',' params                  { 
                                            $$ = append([]Term{$1}, $3...)                                           
                                        }

param:
    ATOM                                { $$ = $1 }
    | number                            { $$ = $1 }
    | STRING                            { $$ = $1 }
    | VARIABLE                          { $$ = $1 }
    | '_'                               { $$ = $1 }
    | compterm                          { $$ = $1 }

number:
    INTEGER                             { $$ = $1 }
    | FLOAT                             { $$ = $1 }


list: 
    '[' ']'                             { $$ = &CompoundTerm{
                                            Functor : "dot",
                                            Children : []Term{},
                                            } 
                                        }
    | '['  params ']'                   {
                                            $$ = newList( $2 ... )                                            
                                        }
    | '[' param '|' param ']'           { $$ = &CompoundTerm{
                                            Functor : "dot",
                                            Children : []Term{$2 , $4} ,
                                            } 
                                        }
    | '[' param '|' ']'                 {
                                            $$ = &CompoundTerm{
                                            Functor : "dot",
                                            Children : []Term{$2} ,
                                            } 
                                        }


%%
